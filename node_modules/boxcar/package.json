{
  "name": "boxcar",
  "description": "An API for the Boxcar Push Notification Service",
  "keywords": [
    "boxcar",
    "push",
    "notifications",
    "push notifications",
    "iphone"
  ],
  "version": "0.9.7",
  "main": "./index",
  "homepage": "http://boxcar.io/",
  "author": {
    "name": "Russell Bradberry",
    "email": "rbradberry@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/devdazed/boxcar-api.git"
  },
  "bugs": {
    "url": "http://github.com/devdazed/boxcar-api/issues"
  },
  "engines": {
    "node": ">0.4"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/devdazed/boxcar-api/raw/master/LICENSE"
    }
  ],
  "readme": "## BoxCar API\nThis is a node.js non-blocking API consumer for the BoxCar push notification service.  BoxCar Api is an EventEmitter that emits 'response' on completion.  You can push notifications as yourself (a user) or as a provider.\n\n##Installation\nnpm\n\n    $ npm install boxcar\n  \ngithub\n\n    $ git clone git@github.com:devdazed/boxcar-api.git\n\n##Basic Usage\nThe constructor takes 2 arguments, the fist is your Provider Key, the second is your secret key.  Your secret key is only required if using 'broadcast' or 'notifyService'\n\n    var boxcar = require('boxcar');\n    var provider = new boxcar.Provider('your_provider_key', 'your_provider_secret');\n\n    //to brodcast a message to your all of the users in your service\n    provider.broadcast('This is a test', 'FooBar');\n    \n    //send a message to a user directly\n    provider.notify('foo@bar.com', 'Hi FooBar!');\n    \n    //subscribe a current boxcar user to your service\n    provider.subscribe('foo@bar.com');\n    \n    //to send yourself messages you can use the user api\n    var user = new boxcar.User('your@email.com', 'your_boxcar_password');\n    user.notify('Hai Me!');\n    \n##Advanced Usage\nWhen using notify and broadcast you can specify additional parameters, an explanation of parameters is below.\n###Provider.subscribe(email)\nSubscribes a boxcar user to your service\n###Provider.notify(email, message, fromScreenName, fromRemoteServiceId, redirectPayload, sourceUrl, iconUrl)\nSends a notification to a specific user\n###Provider.broadcast(message, fromScreenName, fromRemoteServiceId, redirectPayload, sourceUrl, iconUrl)\nSends a notification to all users in your service\n###User.notify(message, fromScreenName, fromRemoteServiceId, sourceUrl, iconUrl)\nTo use the User API, you must first install the boxcar Growl service.\n\n###Parameters\n- **email**: The user's email address\n- **message**: The message to display to the user. This message should be at a maximum somewhere around 140 characters in length. Longer messages will be truncated depending on the client receiving it.\n- **fromScreenName**:  The user or application sending the notification. This is matched for the redirect performed by Boxcar (if set by the user).\n- **fromRemoteServiceId**: An integer value that will uniquely identify the notification, and prevent duplicate notifications about the same event from being created.\n- **redirectPayload**: The payload to be passed in as part of the redirection URL. Keep this as short as possible. If your redirection URL contains \"::user::\" in it, this will replace it in the URL. An example payload would be the users username, to take them to the appropriate page when redirecting.\n- **sourceUrl**: This is a URL that may be used for future devices. It will replace the redirect payload.\n- **iconUrl**: This is the URL of the icon that will be shown to the user. Standard size is 57x57.\n\n\n",
  "readmeFilename": "README.md",
  "_id": "boxcar@0.9.7",
  "dist": {
    "shasum": "7d696c947c08e3981a2c984e1f852ee043a2ec37"
  },
  "_from": "boxcar@0.9.x",
  "_resolved": "https://registry.npmjs.org/boxcar/-/boxcar-0.9.7.tgz"
}
