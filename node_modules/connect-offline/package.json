{
  "author": {
    "name": "Jordan Sitkin",
    "url": "http://jordansitkin.com"
  },
  "name": "connect-offline",
  "description": "Generates HTML5 Cache Manifest files (ala Rack::Offline)",
  "version": "1.0.4",
  "homepage": "http://github.com/dustmason/connect-offline",
  "repository": {
    "type": "git",
    "url": "git://github.com/dustmason/connect-offline.git"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "main": "lib/offline.js",
  "dependencies": {
    "underscore": "1.1.7"
  },
  "devDependencies": {
    "async": "0.1.14",
    "coffee-script": "~1.3.1",
    "connect": "1.8.5",
    "nodeunit": "0.5.4",
    "request": "2.1.1",
    "watchit": "0.0.4"
  },
  "readme": "## Connect-Offline\n\nWhile searching for some connect middleware to handle generating a cache\nmanifest, I discovered that the CacheManifest middleware had been\nremoved from the 1.0 release of Connect. I'm not sure why that is, but\nit inspired me to create a new one.\n\n## Installation\n\n```\n  npm install connect-offline\n```\n\n## What It Does\n\n*connect-offline* simply compiles the arguments you pass into a properly formatted cache\nmanifest file. The main convenience it provides is automatically making\nsure the cache gets re-downloaded by the browser when you update the\nfiles that are being cached. This is done using the modified-at\ntimestamps on the files.\n\n## Options\n\n`manifest_path` is the url you want to serve your cache manifest from.\nThis should match the `manifest` attribute of your html tag. For example: `<html manifest=\"example.appcache\">`\n\n`networks` is a simple array of values for the `NETWORK` section of the\nmanifest.\n\n`fallbacks` is an object to populate the `FALLBACK` section of the\nmanifest. Its keys become the urls to handle while its values represent\nthe redirects for those urls.\n\n`files` expects an array of objects describing directories of files to\nadd to the cache. See below for an example.\n\n`use_fs_watch` is a boolean that indicates whether or not you want node\nto call fs.watch() on each file you are including in the cache manifest\nwith a callback that will update the \"cache buster\" timestamp when any\nof those files change. You might want to use this option to ease\ndevelopment - you won't have to restart your server process every time\nyou change a file and want browsers to download the new cache manifest.\nSee the tests for more info.\n\n## Check It Out\n\nGiven a directory structure:\n\n```\n├── app.js\n└── public\n    ├── css\n    │   └── style.css\n    └── js\n        └── hello.js\n```\n\nAnd this app.coffee:\n\n```\n  offline = require('connect-offline')\n  app = require('connect').createServer()\n  app.use(offline\n    manifest_path: \"/application.manifest\"\n    files: [\n      { dir: '/public/css', prefix: '/css/' },\n      { dir: '/public/js', prefix: '/js/' }\n    ]\n  )\n  app.listen 3590\n```\n\nYou'll get an `application.manifest` that looks like this:\n\n```\n  CACHE MANIFEST\n  # Wed, 22 Aug 2012 03:24:19 GMT\n\n  CACHE:\n  /css/style.css\n  /js/hello.js\n```\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/dustmason/connect-offline/issues"
  },
  "_id": "connect-offline@1.0.4",
  "dist": {
    "shasum": "3605a3032ca263872393b06ec53c0972ff3f7522"
  },
  "_from": "connect-offline@1.x",
  "_resolved": "https://registry.npmjs.org/connect-offline/-/connect-offline-1.0.4.tgz"
}
